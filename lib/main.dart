import 'dart:async';
import 'dart:io';

import 'package:bhuprahari_app/pages/auth/startup.dart';
import 'package:bhuprahari_app/style/styles.dart';
import 'package:bhuprahari_app/utils/responsive.dart';
import 'package:bhuprahari_app/utils/shared_prefs_manager.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:get/get.dart';
import 'package:responsive_sizer/responsive_sizer.dart';

// Import local files (now only core utilities and pages)
import 'components/global_snackbar.dart';
import 'firebase_options.dart';
import 'network/dio_client.dart';
import 'pages/auth/login_page.dart';
import 'pages/dashboard/main_page.dart';
import 'utils/app_constants.dart'; // Keep for default sizes
import 'utils/logger.dart';
import 'utils/strings.dart';


/**
 @Developer: Devendra Singh Kanawat
 @email: idevendrajput@gmail.com
 **/


// Assuming firebase_options.dart is correctly generated by FlutterFire CLI
// import 'firebase_options.dart';

// Global accessors
DioClient get $apiClient => DioClient(); // Use DioClient instance
Strings get $strings => Strings();
Logger get $logger => Logger();
AppStyle get $styles => AppStyle();
SharedPrefsManager get $sharedPrefsManager => SharedPrefsManager(); // Use SharedPrefsManager instance

// FlutterLocalNotificationsPlugin instance
final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
FlutterLocalNotificationsPlugin();



void navigate(
    BuildContext context,
    Widget page, {
      bool unFocus = true,
      bool noAnim = false,
      bool finish = false,
      bool finishAffinity = false,
    }) {
  if (unFocus) {
    FocusScope.of(context).unfocus(); // Remove focus if needed
  }

  final route = MaterialPageRoute(builder: (context) => page);

  if (finishAffinity) {
    // Remove all previous screens and push the new one
    Navigator.of(context).pushAndRemoveUntil(route, (route) => false);
  } else if (finish) {
    // Replace the current screen with the new one
    Navigator.of(context).pushReplacement(route);
  } else {
    if (noAnim) {
      // Navigate without animation
      Navigator.of(context).push(route);
    } else {
      // Default push with animation
      Navigator.of(context).push(
        PageRouteBuilder(
          pageBuilder: (context, animation, secondaryAnimation) => page,
          transitionDuration: Duration.zero,
          reverseTransitionDuration: Duration.zero,
        ),
      );
    }
  }
}

navigatePop(BuildContext context) {
  if (Navigator.canPop(context)) {
    Navigator.pop(context);
  }
}


void hideKeyboard() {
  FocusManager.instance.primaryFocus?.unfocus();
}

void showKeyboard() {
  FocusManager.instance.primaryFocus?.requestFocus();
}

void snackBar(String title, String message) {
  Get.snackbar(
    title,
    message,
    duration: const Duration(seconds: 2),
  );
}

// MyHttpOverrides for HTTP certificate issues (from your provided code)
class MyHttpOverrides extends HttpOverrides {
  @override
  HttpClient createHttpClient(SecurityContext? context) {
    return super.createHttpClient(context)
      ..badCertificateCallback = (X509Certificate cert, String host,
          int port) => true;
  }
}

// Firebase Messaging handler for background messages
@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp();
  print('Handling a background message: ${message.messageId}');

  // Show local notification for background messages
  if (message.notification != null) {
    flutterLocalNotificationsPlugin.show(
      message.hashCode, // Unique ID for the notification
      message.notification!.title,
      message.notification!.body,
      const NotificationDetails(
        android: AndroidNotificationDetails(
          'bhuprahari_channel_id', // Must match the channel ID created in initLocalNotifications
          'Bhuprahari Alerts',
          channelDescription: 'Notifications for land change detection alerts',
          importance: Importance.high,
          priority: Priority.high,
          icon: '@mipmap/ic_launcher', // Use your app icon
        ),
      ),
      payload: message.data['area_config_id'], // Example payload
    );
  }
}

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // Set up Firebase Messaging for foreground and background
  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);
  FirebaseMessaging.onMessage.listen((RemoteMessage message) {
    print('Got a message whilst in the foreground!');
    print('Message data: ${message.data}');

    if (message.notification != null) {
      print('Message also contained a notification: ${message.notification}');
      // Show local notification for foreground messages
      flutterLocalNotificationsPlugin.show(
        message.hashCode,
        message.notification!.title,
        message.notification!.body,
        const NotificationDetails(
          android: AndroidNotificationDetails(
            'bhuprahari_channel_id',
            'Bhuprahari Alerts',
            channelDescription: 'Notifications for land change detection alerts',
            importance: Importance.high,
            priority: Priority.high,
            icon: '@mipmap/ic_launcher',
          ),
        ),
        payload: message.data['area_config_id'],
      );
    }
  });

  // Get FCM token for testing (optional, for sending test notifications from Firebase Console)
  FirebaseMessaging.instance.getToken().then((token) {
    if (token != null) {
      print("FCM Device Token: $token");
      // You might want to save this token to your backend for targeted notifications
      // For now, you can copy this token and paste it into your Python config.py
    }
  });

  await $sharedPrefsManager.init(); // Initialize shared preferences manager
  HttpOverrides.global = MyHttpOverrides(); // For handling bad certificates (dev only)

  SystemChrome.setSystemUIOverlayStyle(
    const SystemUiOverlayStyle(
      statusBarColor: Colors.transparent, // Make status bar transparent
      statusBarIconBrightness:
      Brightness.dark, // or Brightness.light based on background
    ),
  );
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return ResponsiveSizer(
      builder: (context, orientation, screenType) {
        return GetMaterialApp(
          key: GlobalSnackbarHelper.scaffoldMessengerKey, // For global snackbars
          title: $strings.appTitle,
          debugShowCheckedModeBanner: false,
          theme: ThemeData(
            colorScheme: ColorScheme.fromSeed(seedColor: $styles.colors.primary),
            useMaterial3: true,
            // Define basic text styles here if needed globally
            textTheme: TextTheme(
              bodyMedium: TextStyle(fontSize: Responsive.size(context, defaultTextSize), color: $styles.colors.title),
              titleMedium: TextStyle(fontSize: Responsive.size(context, defaultTextSize), fontWeight: FontWeight.bold, color: $styles.colors.title),
            ),
          ),
          home: FutureBuilder<bool>(
            future: _checkLoginStatus(),
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return const Scaffold(
                  body: Center(
                    child: CircularProgressIndicator(),
                  ),
                );
              } else {
                return snapshot.data == true ? const MainPage() : const Startup();
              }
            },
          ),
        );
      },
    );
  }

  Future<bool> _checkLoginStatus() async {
    await $sharedPrefsManager.init(); // Ensure shared preferences are initialized
    return $sharedPrefsManager.isLoggedIn();
  }
}
